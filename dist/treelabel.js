// Generated by CoffeeScript 1.8.0
(function() {
  var React, TreeLabel, TreeLabelWrapper, cx, ra;

  React = require('react/addons');

  ra = React.DOM;

  cx = React.addons.classSet;

  TreeLabelWrapper = React.createClass({
    displayName: 'TreeLabelWrapper',
    getStyle: function() {
      switch (this.props.type) {
        case 'circle':
          return {
            position: 'absolute',
            left: this.props.left,
            borderRadius: this.props.width / 2,
            width: this.props.width,
            height: this.props.height
          };
        case 'rectangle':
          return {
            position: 'absolute',
            left: this.props.left,
            borderRadius: 5,
            width: this.props.width,
            height: this.props.height
          };
        case 'triangle':
          return {
            position: 'absolute',
            left: this.props.left,
            width: this.props.width,
            height: this.props.height
          };
        case 'square':
          return {
            position: 'absolute',
            left: this.props.left,
            width: this.props.width,
            height: this.props.height
          };
      }
    },
    render: function() {
      return ra.div({
        className: ("BAOBAB_" + this.props.type + " ") + cx({
          BAOBAB_label: true,
          BAOBAB_hasFocus: this.props.hasFocus,
          BAOBAB_collapsed: this.props.collapsed
        }),
        onClick: (function(_this) {
          return function(e) {
            return e.currentTarget.children[0].focus();
          };
        })(this),
        onKeyDown: this.props.onKeyDown,
        onFocus: this.props.onFocus,
        style: this.getStyle()
      }, this.props.children);
    }
  });

  TreeLabel = React.createClass({
    displayName: 'TreeLabel',
    componentDidMount: function() {
      return this.componentDidUpdate();
    },
    componentDidUpdate: function() {
      if (this.props.hasFocus) {
        return this.getDOMNode().children[0].focus();
      }
    },
    render: function() {
      return React.createElement(TreeLabelWrapper, {
        type: this.props.type,
        hasFocus: this.props.hasFocus,
        collapsed: this.props.collapsed,
        left: this.props.left,
        width: this.props.width,
        height: this.props.height,
        onFocus: this.props.onFocus,
        onKeyDown: this.props.keyHandler
      }, ra.textarea({
        type: 'text',
        value: this.props.children,
        style: {
          width: this.props.textWidth,
          height: this.props.textHeight,
          marginTop: (this.props.height - this.props.textHeight) / 2,
          marginLeft: (this.props.width - this.props.textWidth) / 2
        },
        onChange: (function(_this) {
          return function(e) {
            var newValue;
            newValue = e.currentTarget.value;
            _this.props.changeCallback(newValue);
          };
        })(this)
      }));
    }
  });

  module.exports = React.createFactory(TreeLabel);

}).call(this);

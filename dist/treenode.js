// Generated by CoffeeScript 1.8.0
(function() {
  var Line, React, TreeLabel, TreeNode, ra;

  React = require('react');

  ra = React.DOM;

  TreeLabel = require('./treelabel');

  Line = require('./line');

  TreeNode = React.createClass({
    getDefaultProps: function() {
      return {
        left: 0,
        top: 0,
        showEtc: false,
        collapsed: false
      };
    },
    getLineValues: function() {
      return {
        startX: this.getCenter().x,
        startY: this.getCenter().y,
        endX: this.props.root.parent != null ? this.props.root.parent.getWidth() / 2 - this.props.left : void 0,
        endY: this.props.root.parent != null ? this.props.root.parent.getLabelHeight() / 2 - this.props.top : void 0
      };
    },
    getCenter: function() {
      return {
        x: this.props.root.getWidth() / 2,
        y: this.props.root.getLabelHeight() / 2
      };
    },
    render: function() {
      var hasFocus, leftAccumulator, subtree;
      if (this.props.focus != null) {
        hasFocus = this.props.focus.id === this.props.root.id;
      } else {
        hasFocus = false;
      }
      return ra.li({
        onBlur: this.props.onBlur,
        style: {
          position: 'absolute',
          top: this.props.top,
          left: this.props.left,
          width: "" + (this.props.root.getWidth()) + "px"
        }
      }, this.props.root.parent != null ? !this.props.showEtc ? Line({
        width: '2px',
        color: '#000000',
        startX: this.getLineValues().startX,
        startY: this.getLineValues().startY,
        endX: this.getLineValues().endX,
        endY: this.getLineValues().endY
      }) : Line({
        width: '2px',
        color: '#aaa',
        startX: this.getLineValues().startX,
        startY: this.getLineValues().startY,
        endX: this.getLineValues().startX,
        endY: -this.props.lineSpacing
      }) : void 0, TreeLabel({
        type: this.props.root.type,
        left: this.getCenter().x - this.props.root.getLabelWidth() / 2,
        width: this.props.root.getLabelWidth(),
        height: this.props.root.getLabelHeight(),
        textWidth: this.props.root.getTextWidth(),
        textHeight: this.props.root.getTextHeight(),
        hasFocus: hasFocus,
        allFocus: this.props.allFocus,
        collapsed: this.props.root.getCollapsed(),
        onFocus: (function(_this) {
          return function() {
            return _this.props.focusCallback(_this.props.root);
          };
        })(this),
        keyHandler: this.props.keyHandler,
        changeCallback: this.props.changeCallback
      }, this.props.root.value), ra.ul(null, (function() {
        var _i, _len, _ref, _results;
        if (!this.props.root.getCollapsed()) {
          leftAccumulator = 0;
          _ref = this.props.root.subtrees;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            subtree = _ref[_i];
            leftAccumulator += subtree.getWidth();
            _results.push(React.createElement(TreeNode, {
              lineSpacing: this.props.lineSpacing,
              root: subtree,
              focus: this.props.focus,
              allFocus: this.props.allFocus,
              key: subtree.id,
              left: leftAccumulator - subtree.getWidth(),
              top: this.props.lineSpacing + this.props.root.getLabelHeight(),
              maxDepth: this.props.maxDepth - 1,
              focusCallback: this.props.focusCallback,
              changeCallback: this.props.changeCallback,
              keyHandler: this.props.keyHandler,
              onBlur: this.props.onBlur
            }));
          }
          return _results;
        }
      }).call(this)));
    }
  });

  module.exports = React.createFactory(TreeNode);

}).call(this);
